definitions:
  controllers.TokenInformations:
    properties:
      provider:
        type: string
      user_id:
        type: string
    type: object
  controllers.credentials:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  controllers.userArea:
    properties:
      action:
        $ref: '#/definitions/serviceinterface.ServiceStatus'
      id:
        type: integer
      reactions:
        items:
          $ref: '#/definitions/serviceinterface.ServiceStatus'
        type: array
    type: object
  controllers.userSignUp:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  log_types.UserLogInfos:
    properties:
      token:
        type: string
      user_id:
        type: integer
    type: object
  models.Action:
    properties:
      ingredients:
        additionalProperties: {}
        type: object
      microservice:
        type: string
      service:
        type: string
    type: object
  models.Actions:
    properties:
      action:
        $ref: '#/definitions/models.Action'
      area_id:
        description: No anotation here !
        type: integer
      id:
        type: integer
    type: object
  models.Area:
    properties:
      action:
        $ref: '#/definitions/models.Actions'
      id:
        type: integer
      one_shot:
        type: boolean
      reactions:
        items:
          $ref: '#/definitions/models.Reactions'
        type: array
      user_id:
        type: integer
    type: object
  models.AreaScenario:
    properties:
      action:
        $ref: '#/definitions/models.Action'
      reaction:
        $ref: '#/definitions/models.Reaction'
    type: object
  models.Reaction:
    properties:
      ingredients:
        additionalProperties: {}
        type: object
      microservice:
        type: string
      service:
        type: string
    type: object
  models.Reactions:
    properties:
      area_id:
        description: No anotation here !
        type: integer
      id:
        type: integer
      prev_out:
        additionalProperties: true
        type: object
      reaction:
        $ref: '#/definitions/models.Reaction'
    type: object
  models.Token:
    properties:
      access_token:
        type: string
      id:
        type: integer
      provider:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.User:
    properties:
      areas:
        items:
          $ref: '#/definitions/models.Area'
        type: array
      created_at:
        description: Useful for log and security purposes
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      tokens:
        items:
          $ref: '#/definitions/models.Token'
        type: array
      updated_at:
        type: string
    type: object
  serviceinterface.ActionResponseStatus:
    properties:
      action_id:
        type: integer
      description:
        type: string
    type: object
  serviceinterface.IngredientDescriptor:
    properties:
      description:
        type: string
      required:
        type: boolean
      type:
        type: string
      value: {}
    type: object
  serviceinterface.Ingredients:
    additionalProperties:
      $ref: '#/definitions/serviceinterface.IngredientDescriptor'
    type: object
  serviceinterface.MicroserviceDescriptor:
    properties:
      ingredients:
        $ref: '#/definitions/serviceinterface.Ingredients'
      name:
        description: Name of the microservice
        type: string
      ref_name:
        description: Reference Name of the microservice as it is named in the server
        type: string
      type:
        type: string
    type: object
  serviceinterface.ServiceStatus:
    properties:
      microservices:
        items:
          $ref: '#/definitions/serviceinterface.MicroserviceDescriptor'
        type: array
      name:
        description: Name of the service
        type: string
      ref_name:
        description: Reference Name of the service as it is named in the server
        type: string
    type: object
info:
  contact: {}
  description: This is a the document of the Backend routes of the application AREA
  title: Swagger AREA API
  version: "1.0"
paths:
  /about.json:
    get:
      consumes:
      - application/json
      description: json giving the list of handled action-reaction services
      produces:
      - application/json
      responses: {}
      summary: List of handled services
      tags:
      - Utils
  /area/list:
    get:
      consumes:
      - application/json
      description: List all user's area
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.userArea'
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List User's area
      tags:
      - Area
  /create/{service}:
    get:
      consumes:
      - application/json
      description: Register a new Area in the application
      parameters:
      - description: Service Name
        in: path
        name: service
        required: true
        type: string
      - description: Full body of an Area Scenario
        in: body
        name: area
        required: true
        schema:
          $ref: '#/definitions/models.AreaScenario'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serviceinterface.ActionResponseStatus'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a new Area
      tags:
      - Area
  /create/list:
    get:
      consumes:
      - application/json
      description: List all user's area
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/serviceinterface.ServiceStatus'
            type: array
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List User's area
      tags:
      - Area
  /login/:
    post:
      consumes:
      - application/json
      description: Login a user if he has the correct credentials and returns the
        tokens and the user_id
      parameters:
      - description: Credentials of the user who wants to connect
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.credentials'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/log_types.UserLogInfos'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Sign-In
      tags:
      - Account
  /oauth/:
    post:
      consumes:
      - application/json
      description: Create account with code from redirect url
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/log_types.UserLogInfos'
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create account with oauth
      tags:
      - Account
  /oauth/{service}:
    get:
      consumes:
      - application/json
      description: get the oauth redirect url for a service
      parameters:
      - description: Redirect URL for the oauth
        in: query
        name: redirect_uri
        required: true
        type: string
      - description: Name of the service to use oauth with
        in: path
        name: service
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: get Oauth url by service
      tags:
      - Account
  /ping:
    get:
      description: pong
      produces:
      - application/json
      responses:
        "200":
          description: pong
      summary: prints pong
      tags:
      - ping
  /sign-up/:
    post:
      consumes:
      - application/json
      description: register an account by giving credentials
      parameters:
      - description: New User informations to sign-up to the app
        in: body
        name: newUser
        required: true
        schema:
          $ref: '#/definitions/controllers.userSignUp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userSignUp'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Sign-up a new account
      tags:
      - Account
  /token/:
    delete:
      consumes:
      - application/json
      description: Delete a token from a user_id and a provider
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.TokenInformations'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a token
      tags:
      - Token
    post:
      consumes:
      - application/json
      description: Get the tokens from a user_id and a provider
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        type: string
      - description: Provider of the Remote Service
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a token
      tags:
      - Token
  /token/{user_id}:
    get:
      consumes:
      - application/json
      description: Get all the tokens from a user_id
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Token'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all the tokens from a user
      tags:
      - Token
  /token/create/:
    post:
      consumes:
      - application/json
      description: Create a token from a user_id and a provider
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a token
      tags:
      - Token
  /webhook/{service}/{microservice}/{action_id}:
    post:
      consumes:
      - application/json
      description: WebHook Enpoint for the remote services payloads
      parameters:
      - description: Service Name
        in: path
        name: service
        required: true
        type: string
      - description: Microservice Name
        in: path
        name: microservice
        required: true
        type: string
      - description: Action ID for the reaction service
        in: path
        name: action_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "401":
          description: Unauthorized
          schema: {}
      summary: WebHook Enpoint
      tags:
      - Area
swagger: "2.0"
