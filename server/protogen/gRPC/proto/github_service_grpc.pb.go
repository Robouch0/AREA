// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
<<<<<<< Updated upstream
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gRPC/proto/github_service.proto
=======
>>>>>>> Stashed changes

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
<<<<<<< Updated upstream
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GithubService_UpdateRepository_FullMethodName = "/github.GithubService/UpdateRepository"
	GithubService_UpdateFile_FullMethodName       = "/github.GithubService/UpdateFile"
	GithubService_DeleteFile_FullMethodName       = "/github.GithubService/DeleteFile"
)
=======
const _ = grpc.SupportPackageIsVersion7
>>>>>>> Stashed changes

// GithubServiceClient is the client API for GithubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GithubServiceClient interface {
	UpdateRepository(ctx context.Context, in *UpdateRepoInfos, opts ...grpc.CallOption) (*UpdateRepoInfos, error)
	UpdateFile(ctx context.Context, in *UpdateRepoFile, opts ...grpc.CallOption) (*UpdateRepoFile, error)
	DeleteFile(ctx context.Context, in *DeleteRepoFile, opts ...grpc.CallOption) (*DeleteRepoFile, error)
}

type githubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGithubServiceClient(cc grpc.ClientConnInterface) GithubServiceClient {
	return &githubServiceClient{cc}
}

func (c *githubServiceClient) UpdateRepository(ctx context.Context, in *UpdateRepoInfos, opts ...grpc.CallOption) (*UpdateRepoInfos, error) {
	out := new(UpdateRepoInfos)
	err := c.cc.Invoke(ctx, "/github.GithubService/UpdateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubServiceClient) UpdateFile(ctx context.Context, in *UpdateRepoFile, opts ...grpc.CallOption) (*UpdateRepoFile, error) {
	out := new(UpdateRepoFile)
	err := c.cc.Invoke(ctx, "/github.GithubService/UpdateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *githubServiceClient) DeleteFile(ctx context.Context, in *DeleteRepoFile, opts ...grpc.CallOption) (*DeleteRepoFile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRepoFile)
	err := c.cc.Invoke(ctx, GithubService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GithubServiceServer is the server API for GithubService service.
// All implementations must embed UnimplementedGithubServiceServer
// for forward compatibility
type GithubServiceServer interface {
	UpdateRepository(context.Context, *UpdateRepoInfos) (*UpdateRepoInfos, error)
	UpdateFile(context.Context, *UpdateRepoFile) (*UpdateRepoFile, error)
	DeleteFile(context.Context, *DeleteRepoFile) (*DeleteRepoFile, error)
	mustEmbedUnimplementedGithubServiceServer()
}

// UnimplementedGithubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGithubServiceServer struct {
}

func (UnimplementedGithubServiceServer) UpdateRepository(context.Context, *UpdateRepoInfos) (*UpdateRepoInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepository not implemented")
}
func (UnimplementedGithubServiceServer) UpdateFile(context.Context, *UpdateRepoFile) (*UpdateRepoFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedGithubServiceServer) DeleteFile(context.Context, *DeleteRepoFile) (*DeleteRepoFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedGithubServiceServer) mustEmbedUnimplementedGithubServiceServer() {}

// UnsafeGithubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GithubServiceServer will
// result in compilation errors.
type UnsafeGithubServiceServer interface {
	mustEmbedUnimplementedGithubServiceServer()
}

func RegisterGithubServiceServer(s *grpc.Server, srv GithubServiceServer) {
	s.RegisterService(&_GithubService_serviceDesc, srv)
}

func _GithubService_UpdateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServiceServer).UpdateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.GithubService/UpdateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServiceServer).UpdateRepository(ctx, req.(*UpdateRepoInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _GithubService_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServiceServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.GithubService/UpdateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServiceServer).UpdateFile(ctx, req.(*UpdateRepoFile))
	}
	return interceptor(ctx, in, info, handler)
}

<<<<<<< Updated upstream
func _GithubService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GithubServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GithubService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GithubServiceServer).DeleteFile(ctx, req.(*DeleteRepoFile))
	}
	return interceptor(ctx, in, info, handler)
}

// GithubService_ServiceDesc is the grpc.ServiceDesc for GithubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GithubService_ServiceDesc = grpc.ServiceDesc{
=======
var _GithubService_serviceDesc = grpc.ServiceDesc{
>>>>>>> Stashed changes
	ServiceName: "github.GithubService",
	HandlerType: (*GithubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRepository",
			Handler:    _GithubService_UpdateRepository_Handler,
		},
		{
			MethodName: "UpdateFile",
			Handler:    _GithubService_UpdateFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _GithubService_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/github_service.proto",
}
