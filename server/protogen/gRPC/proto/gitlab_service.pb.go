// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.21.12
// source: gRPC/proto/gitlab_service.proto

package service

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateLabRepoFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // Path parameter
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                             // Path parameter
	Branch        string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitMessage string                 `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateLabRepoFile) Reset() {
	*x = CreateLabRepoFile{}
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLabRepoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLabRepoFile) ProtoMessage() {}

func (x *CreateLabRepoFile) ProtoReflect() protoreflect.Message {
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLabRepoFile.ProtoReflect.Descriptor instead.
func (*CreateLabRepoFile) Descriptor() ([]byte, []int) {
	return file_gRPC_proto_gitlab_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateLabRepoFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *CreateLabRepoFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateLabRepoFile) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *CreateLabRepoFile) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *CreateLabRepoFile) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UpdateLabRepoFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // Path parameter
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                             // Path parameter
	Branch        string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitMessage string                 `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	Content       string                 `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateLabRepoFile) Reset() {
	*x = UpdateLabRepoFile{}
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateLabRepoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLabRepoFile) ProtoMessage() {}

func (x *UpdateLabRepoFile) ProtoReflect() protoreflect.Message {
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLabRepoFile.ProtoReflect.Descriptor instead.
func (*UpdateLabRepoFile) Descriptor() ([]byte, []int) {
	return file_gRPC_proto_gitlab_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateLabRepoFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *UpdateLabRepoFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateLabRepoFile) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *UpdateLabRepoFile) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

func (x *UpdateLabRepoFile) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DeleteLabRepoFile struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilePath      string                 `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"` // Path parameter
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                             // Path parameter
	Branch        string                 `protobuf:"bytes,3,opt,name=branch,proto3" json:"branch,omitempty"`
	CommitMessage string                 `protobuf:"bytes,4,opt,name=commit_message,json=commitMessage,proto3" json:"commit_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteLabRepoFile) Reset() {
	*x = DeleteLabRepoFile{}
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteLabRepoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLabRepoFile) ProtoMessage() {}

func (x *DeleteLabRepoFile) ProtoReflect() protoreflect.Message {
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLabRepoFile.ProtoReflect.Descriptor instead.
func (*DeleteLabRepoFile) Descriptor() ([]byte, []int) {
	return file_gRPC_proto_gitlab_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteLabRepoFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DeleteLabRepoFile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteLabRepoFile) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *DeleteLabRepoFile) GetCommitMessage() string {
	if x != nil {
		return x.CommitMessage
	}
	return ""
}

type TodoLabItemDone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TodoLabItemDone) Reset() {
	*x = TodoLabItemDone{}
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TodoLabItemDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TodoLabItemDone) ProtoMessage() {}

func (x *TodoLabItemDone) ProtoReflect() protoreflect.Message {
	mi := &file_gRPC_proto_gitlab_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TodoLabItemDone.ProtoReflect.Descriptor instead.
func (*TodoLabItemDone) Descriptor() ([]byte, []int) {
	return file_gRPC_proto_gitlab_service_proto_rawDescGZIP(), []int{3}
}

func (x *TodoLabItemDone) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_gRPC_proto_gitlab_service_proto protoreflect.FileDescriptor

var file_gRPC_proto_gitlab_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x67, 0x52, 0x50, 0x43, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x7f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x21, 0x0a, 0x0f, 0x54, 0x6f, 0x64, 0x6f, 0x4c, 0x61, 0x62, 0x49, 0x74, 0x65,
	0x6d, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xa7, 0x02, 0x0a, 0x0d, 0x47, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x1a, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x2e, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x52, 0x65,
	0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x19, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x19, 0x2e, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x61, 0x62, 0x52,
	0x65, 0x70, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0e, 0x4d, 0x61, 0x72,
	0x6b, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x54, 0x6f, 0x64, 0x6f, 0x4c, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x6f, 0x6e, 0x65, 0x1a, 0x17, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x54, 0x6f,
	0x64, 0x6f, 0x4c, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x6f, 0x6e, 0x65, 0x22, 0x00, 0x42,
	0x21, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x72,
	0x65, 0x61, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gRPC_proto_gitlab_service_proto_rawDescOnce sync.Once
	file_gRPC_proto_gitlab_service_proto_rawDescData = file_gRPC_proto_gitlab_service_proto_rawDesc
)

func file_gRPC_proto_gitlab_service_proto_rawDescGZIP() []byte {
	file_gRPC_proto_gitlab_service_proto_rawDescOnce.Do(func() {
		file_gRPC_proto_gitlab_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_gRPC_proto_gitlab_service_proto_rawDescData)
	})
	return file_gRPC_proto_gitlab_service_proto_rawDescData
}

var file_gRPC_proto_gitlab_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gRPC_proto_gitlab_service_proto_goTypes = []any{
	(*CreateLabRepoFile)(nil), // 0: gitlab.CreateLabRepoFile
	(*UpdateLabRepoFile)(nil), // 1: gitlab.UpdateLabRepoFile
	(*DeleteLabRepoFile)(nil), // 2: gitlab.DeleteLabRepoFile
	(*TodoLabItemDone)(nil),   // 3: gitlab.TodoLabItemDone
}
var file_gRPC_proto_gitlab_service_proto_depIdxs = []int32{
	0, // 0: gitlab.GitlabService.CreateFile:input_type -> gitlab.CreateLabRepoFile
	1, // 1: gitlab.GitlabService.UpdateFile:input_type -> gitlab.UpdateLabRepoFile
	2, // 2: gitlab.GitlabService.DeleteFile:input_type -> gitlab.DeleteLabRepoFile
	3, // 3: gitlab.GitlabService.MarkItemAsDone:input_type -> gitlab.TodoLabItemDone
	0, // 4: gitlab.GitlabService.CreateFile:output_type -> gitlab.CreateLabRepoFile
	1, // 5: gitlab.GitlabService.UpdateFile:output_type -> gitlab.UpdateLabRepoFile
	2, // 6: gitlab.GitlabService.DeleteFile:output_type -> gitlab.DeleteLabRepoFile
	3, // 7: gitlab.GitlabService.MarkItemAsDone:output_type -> gitlab.TodoLabItemDone
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_gRPC_proto_gitlab_service_proto_init() }
func file_gRPC_proto_gitlab_service_proto_init() {
	if File_gRPC_proto_gitlab_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gRPC_proto_gitlab_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gRPC_proto_gitlab_service_proto_goTypes,
		DependencyIndexes: file_gRPC_proto_gitlab_service_proto_depIdxs,
		MessageInfos:      file_gRPC_proto_gitlab_service_proto_msgTypes,
	}.Build()
	File_gRPC_proto_gitlab_service_proto = out.File
	file_gRPC_proto_gitlab_service_proto_rawDesc = nil
	file_gRPC_proto_gitlab_service_proto_goTypes = nil
	file_gRPC_proto_gitlab_service_proto_depIdxs = nil
}
