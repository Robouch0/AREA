// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: gRPC/proto/gitlab_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GitlabService_Test_FullMethodName = "/gitlab.GitlabService/Test"
)

// GitlabServiceClient is the client API for GitlabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GitlabServiceClient interface {
	Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestReq, error)
}

type gitlabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGitlabServiceClient(cc grpc.ClientConnInterface) GitlabServiceClient {
	return &gitlabServiceClient{cc}
}

func (c *gitlabServiceClient) Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestReq, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestReq)
	err := c.cc.Invoke(ctx, GitlabService_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitlabServiceServer is the server API for GitlabService service.
// All implementations must embed UnimplementedGitlabServiceServer
// for forward compatibility.
type GitlabServiceServer interface {
	Test(context.Context, *TestReq) (*TestReq, error)
	mustEmbedUnimplementedGitlabServiceServer()
}

// UnimplementedGitlabServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGitlabServiceServer struct{}

func (UnimplementedGitlabServiceServer) Test(context.Context, *TestReq) (*TestReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedGitlabServiceServer) mustEmbedUnimplementedGitlabServiceServer() {}
func (UnimplementedGitlabServiceServer) testEmbeddedByValue()                       {}

// UnsafeGitlabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GitlabServiceServer will
// result in compilation errors.
type UnsafeGitlabServiceServer interface {
	mustEmbedUnimplementedGitlabServiceServer()
}

func RegisterGitlabServiceServer(s grpc.ServiceRegistrar, srv GitlabServiceServer) {
	// If the following call pancis, it indicates UnimplementedGitlabServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GitlabService_ServiceDesc, srv)
}

func _GitlabService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitlabServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GitlabService_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitlabServiceServer).Test(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GitlabService_ServiceDesc is the grpc.ServiceDesc for GitlabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GitlabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gitlab.GitlabService",
	HandlerType: (*GitlabServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _GitlabService_Test_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/gitlab_service.proto",
}
