// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GoogleServiceClient is the client API for GoogleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoogleServiceClient interface {
	// Send an email with the current user email
	SendEmailMe(ctx context.Context, in *EmailRequestMe, opts ...grpc.CallOption) (*EmailRequestMe, error)
	// Delete one of user's email based on the subject of the mail
	DeleteEmailMe(ctx context.Context, in *DeleteEmailRequestMe, opts ...grpc.CallOption) (*DeleteEmailRequestMe, error)
	// Move to trash an email
	MoveToTrash(ctx context.Context, in *TrashEmailRequestMe, opts ...grpc.CallOption) (*TrashEmailRequestMe, error)
	// Move out of trash an email
	MoveFromTrash(ctx context.Context, in *TrashEmailRequestMe, opts ...grpc.CallOption) (*TrashEmailRequestMe, error)
}

type googleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoogleServiceClient(cc grpc.ClientConnInterface) GoogleServiceClient {
	return &googleServiceClient{cc}
}

func (c *googleServiceClient) SendEmailMe(ctx context.Context, in *EmailRequestMe, opts ...grpc.CallOption) (*EmailRequestMe, error) {
	out := new(EmailRequestMe)
	err := c.cc.Invoke(ctx, "/google.GoogleService/SendEmailMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleServiceClient) DeleteEmailMe(ctx context.Context, in *DeleteEmailRequestMe, opts ...grpc.CallOption) (*DeleteEmailRequestMe, error) {
	out := new(DeleteEmailRequestMe)
	err := c.cc.Invoke(ctx, "/google.GoogleService/DeleteEmailMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleServiceClient) MoveToTrash(ctx context.Context, in *TrashEmailRequestMe, opts ...grpc.CallOption) (*TrashEmailRequestMe, error) {
	out := new(TrashEmailRequestMe)
	err := c.cc.Invoke(ctx, "/google.GoogleService/MoveToTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleServiceClient) MoveFromTrash(ctx context.Context, in *TrashEmailRequestMe, opts ...grpc.CallOption) (*TrashEmailRequestMe, error) {
	out := new(TrashEmailRequestMe)
	err := c.cc.Invoke(ctx, "/google.GoogleService/MoveFromTrash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoogleServiceServer is the server API for GoogleService service.
// All implementations must embed UnimplementedGoogleServiceServer
// for forward compatibility
type GoogleServiceServer interface {
	// Send an email with the current user email
	SendEmailMe(context.Context, *EmailRequestMe) (*EmailRequestMe, error)
	// Delete one of user's email based on the subject of the mail
	DeleteEmailMe(context.Context, *DeleteEmailRequestMe) (*DeleteEmailRequestMe, error)
	// Move to trash an email
	MoveToTrash(context.Context, *TrashEmailRequestMe) (*TrashEmailRequestMe, error)
	// Move out of trash an email
	MoveFromTrash(context.Context, *TrashEmailRequestMe) (*TrashEmailRequestMe, error)
	mustEmbedUnimplementedGoogleServiceServer()
}

// UnimplementedGoogleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoogleServiceServer struct {
}

func (UnimplementedGoogleServiceServer) SendEmailMe(context.Context, *EmailRequestMe) (*EmailRequestMe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailMe not implemented")
}
func (UnimplementedGoogleServiceServer) DeleteEmailMe(context.Context, *DeleteEmailRequestMe) (*DeleteEmailRequestMe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailMe not implemented")
}
func (UnimplementedGoogleServiceServer) MoveToTrash(context.Context, *TrashEmailRequestMe) (*TrashEmailRequestMe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveToTrash not implemented")
}
func (UnimplementedGoogleServiceServer) MoveFromTrash(context.Context, *TrashEmailRequestMe) (*TrashEmailRequestMe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFromTrash not implemented")
}
func (UnimplementedGoogleServiceServer) mustEmbedUnimplementedGoogleServiceServer() {}

// UnsafeGoogleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoogleServiceServer will
// result in compilation errors.
type UnsafeGoogleServiceServer interface {
	mustEmbedUnimplementedGoogleServiceServer()
}

func RegisterGoogleServiceServer(s *grpc.Server, srv GoogleServiceServer) {
	s.RegisterService(&_GoogleService_serviceDesc, srv)
}

func _GoogleService_SendEmailMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailRequestMe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).SendEmailMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.GoogleService/SendEmailMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).SendEmailMe(ctx, req.(*EmailRequestMe))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoogleService_DeleteEmailMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequestMe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).DeleteEmailMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.GoogleService/DeleteEmailMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).DeleteEmailMe(ctx, req.(*DeleteEmailRequestMe))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoogleService_MoveToTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashEmailRequestMe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).MoveToTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.GoogleService/MoveToTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).MoveToTrash(ctx, req.(*TrashEmailRequestMe))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoogleService_MoveFromTrash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrashEmailRequestMe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).MoveFromTrash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.GoogleService/MoveFromTrash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).MoveFromTrash(ctx, req.(*TrashEmailRequestMe))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoogleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "google.GoogleService",
	HandlerType: (*GoogleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmailMe",
			Handler:    _GoogleService_SendEmailMe_Handler,
		},
		{
			MethodName: "DeleteEmailMe",
			Handler:    _GoogleService_DeleteEmailMe_Handler,
		},
		{
			MethodName: "MoveToTrash",
			Handler:    _GoogleService_MoveToTrash_Handler,
		},
		{
			MethodName: "MoveFromTrash",
			Handler:    _GoogleService_MoveFromTrash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/google_service.proto",
}
