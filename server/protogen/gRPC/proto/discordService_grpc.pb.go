// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: gRPC/proto/discordService.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DiscordService_CreateMessage_FullMethodName      = "/discord.DiscordService/CreateMessage"
	DiscordService_EditMessage_FullMethodName        = "/discord.DiscordService/EditMessage"
	DiscordService_DeleteMessage_FullMethodName      = "/discord.DiscordService/DeleteMessage"
	DiscordService_CreateReaction_FullMethodName     = "/discord.DiscordService/CreateReaction"
	DiscordService_DeleteAllReactions_FullMethodName = "/discord.DiscordService/DeleteAllReactions"
	DiscordService_DeleteReactions_FullMethodName    = "/discord.DiscordService/DeleteReactions"
)

// DiscordServiceClient is the client API for DiscordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordServiceClient interface {
	CreateMessage(ctx context.Context, in *CreateMsg, opts ...grpc.CallOption) (*CreateMsg, error)
	EditMessage(ctx context.Context, in *EditMsg, opts ...grpc.CallOption) (*EditMsg, error)
	DeleteMessage(ctx context.Context, in *DeleteMsg, opts ...grpc.CallOption) (*DeleteMsg, error)
	CreateReaction(ctx context.Context, in *CreateReact, opts ...grpc.CallOption) (*CreateReact, error)
	DeleteAllReactions(ctx context.Context, in *DeleteAllReact, opts ...grpc.CallOption) (*DeleteAllReact, error)
	DeleteReactions(ctx context.Context, in *DeleteReact, opts ...grpc.CallOption) (*DeleteReact, error)
}

type discordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordServiceClient(cc grpc.ClientConnInterface) DiscordServiceClient {
	return &discordServiceClient{cc}
}

func (c *discordServiceClient) CreateMessage(ctx context.Context, in *CreateMsg, opts ...grpc.CallOption) (*CreateMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMsg)
	err := c.cc.Invoke(ctx, DiscordService_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordServiceClient) EditMessage(ctx context.Context, in *EditMsg, opts ...grpc.CallOption) (*EditMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditMsg)
	err := c.cc.Invoke(ctx, DiscordService_EditMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordServiceClient) DeleteMessage(ctx context.Context, in *DeleteMsg, opts ...grpc.CallOption) (*DeleteMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMsg)
	err := c.cc.Invoke(ctx, DiscordService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordServiceClient) CreateReaction(ctx context.Context, in *CreateReact, opts ...grpc.CallOption) (*CreateReact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReact)
	err := c.cc.Invoke(ctx, DiscordService_CreateReaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordServiceClient) DeleteAllReactions(ctx context.Context, in *DeleteAllReact, opts ...grpc.CallOption) (*DeleteAllReact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAllReact)
	err := c.cc.Invoke(ctx, DiscordService_DeleteAllReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discordServiceClient) DeleteReactions(ctx context.Context, in *DeleteReact, opts ...grpc.CallOption) (*DeleteReact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReact)
	err := c.cc.Invoke(ctx, DiscordService_DeleteReactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServiceServer is the server API for DiscordService service.
// All implementations must embed UnimplementedDiscordServiceServer
// for forward compatibility.
type DiscordServiceServer interface {
	CreateMessage(context.Context, *CreateMsg) (*CreateMsg, error)
	EditMessage(context.Context, *EditMsg) (*EditMsg, error)
	DeleteMessage(context.Context, *DeleteMsg) (*DeleteMsg, error)
	CreateReaction(context.Context, *CreateReact) (*CreateReact, error)
	DeleteAllReactions(context.Context, *DeleteAllReact) (*DeleteAllReact, error)
	DeleteReactions(context.Context, *DeleteReact) (*DeleteReact, error)
	mustEmbedUnimplementedDiscordServiceServer()
}

// UnimplementedDiscordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDiscordServiceServer struct{}

func (UnimplementedDiscordServiceServer) CreateMessage(context.Context, *CreateMsg) (*CreateMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedDiscordServiceServer) EditMessage(context.Context, *EditMsg) (*EditMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMessage not implemented")
}
func (UnimplementedDiscordServiceServer) DeleteMessage(context.Context, *DeleteMsg) (*DeleteMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedDiscordServiceServer) CreateReaction(context.Context, *CreateReact) (*CreateReact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReaction not implemented")
}
func (UnimplementedDiscordServiceServer) DeleteAllReactions(context.Context, *DeleteAllReact) (*DeleteAllReact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllReactions not implemented")
}
func (UnimplementedDiscordServiceServer) DeleteReactions(context.Context, *DeleteReact) (*DeleteReact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReactions not implemented")
}
func (UnimplementedDiscordServiceServer) mustEmbedUnimplementedDiscordServiceServer() {}
func (UnimplementedDiscordServiceServer) testEmbeddedByValue()                        {}

// UnsafeDiscordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordServiceServer will
// result in compilation errors.
type UnsafeDiscordServiceServer interface {
	mustEmbedUnimplementedDiscordServiceServer()
}

func RegisterDiscordServiceServer(s grpc.ServiceRegistrar, srv DiscordServiceServer) {
	// If the following call pancis, it indicates UnimplementedDiscordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DiscordService_ServiceDesc, srv)
}

func _DiscordService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordService_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).CreateMessage(ctx, req.(*CreateMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordService_EditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).EditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordService_EditMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).EditMessage(ctx, req.(*EditMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).DeleteMessage(ctx, req.(*DeleteMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordService_CreateReaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).CreateReaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordService_CreateReaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).CreateReaction(ctx, req.(*CreateReact))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordService_DeleteAllReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllReact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).DeleteAllReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordService_DeleteAllReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).DeleteAllReactions(ctx, req.(*DeleteAllReact))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscordService_DeleteReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).DeleteReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiscordService_DeleteReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).DeleteReactions(ctx, req.(*DeleteReact))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordService_ServiceDesc is the grpc.ServiceDesc for DiscordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "discord.DiscordService",
	HandlerType: (*DiscordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _DiscordService_CreateMessage_Handler,
		},
		{
			MethodName: "EditMessage",
			Handler:    _DiscordService_EditMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _DiscordService_DeleteMessage_Handler,
		},
		{
			MethodName: "CreateReaction",
			Handler:    _DiscordService_CreateReaction_Handler,
		},
		{
			MethodName: "DeleteAllReactions",
			Handler:    _DiscordService_DeleteAllReactions_Handler,
		},
		{
			MethodName: "DeleteReactions",
			Handler:    _DiscordService_DeleteReactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/discordService.proto",
}
