// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SpotifyServiceClient is the client API for SpotifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotifyServiceClient interface {
	StopSong(ctx context.Context, in *SpotifyStopInfo, opts ...grpc.CallOption) (*SpotifyStopInfo, error)
	CreatePlaylist(ctx context.Context, in *SpotifyCreatePlaylist, opts ...grpc.CallOption) (*SpotifyCreatePlaylist, error)
	NextSong(ctx context.Context, in *SpotifyNextInfo, opts ...grpc.CallOption) (*SpotifyNextInfo, error)
	PreviousSong(ctx context.Context, in *SpotifyPreviousInfo, opts ...grpc.CallOption) (*SpotifyPreviousInfo, error)
}

type spotifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotifyServiceClient(cc grpc.ClientConnInterface) SpotifyServiceClient {
	return &spotifyServiceClient{cc}
}

func (c *spotifyServiceClient) StopSong(ctx context.Context, in *SpotifyStopInfo, opts ...grpc.CallOption) (*SpotifyStopInfo, error) {
	out := new(SpotifyStopInfo)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/StopSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyServiceClient) CreatePlaylist(ctx context.Context, in *SpotifyCreatePlaylist, opts ...grpc.CallOption) (*SpotifyCreatePlaylist, error) {
	out := new(SpotifyCreatePlaylist)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/CreatePlaylist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyServiceClient) NextSong(ctx context.Context, in *SpotifyNextInfo, opts ...grpc.CallOption) (*SpotifyNextInfo, error) {
	out := new(SpotifyNextInfo)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/NextSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyServiceClient) PreviousSong(ctx context.Context, in *SpotifyPreviousInfo, opts ...grpc.CallOption) (*SpotifyPreviousInfo, error) {
	out := new(SpotifyPreviousInfo)
	err := c.cc.Invoke(ctx, "/spotify.SpotifyService/PreviousSong", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpotifyServiceServer is the server API for SpotifyService service.
// All implementations must embed UnimplementedSpotifyServiceServer
// for forward compatibility
type SpotifyServiceServer interface {
	StopSong(context.Context, *SpotifyStopInfo) (*SpotifyStopInfo, error)
	CreatePlaylist(context.Context, *SpotifyCreatePlaylist) (*SpotifyCreatePlaylist, error)
	NextSong(context.Context, *SpotifyNextInfo) (*SpotifyNextInfo, error)
	PreviousSong(context.Context, *SpotifyPreviousInfo) (*SpotifyPreviousInfo, error)
	mustEmbedUnimplementedSpotifyServiceServer()
}

// UnimplementedSpotifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpotifyServiceServer struct {
}

func (UnimplementedSpotifyServiceServer) StopSong(context.Context, *SpotifyStopInfo) (*SpotifyStopInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopSong not implemented")
}
func (UnimplementedSpotifyServiceServer) CreatePlaylist(context.Context, *SpotifyCreatePlaylist) (*SpotifyCreatePlaylist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedSpotifyServiceServer) NextSong(context.Context, *SpotifyNextInfo) (*SpotifyNextInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextSong not implemented")
}
func (UnimplementedSpotifyServiceServer) PreviousSong(context.Context, *SpotifyPreviousInfo) (*SpotifyPreviousInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviousSong not implemented")
}
func (UnimplementedSpotifyServiceServer) mustEmbedUnimplementedSpotifyServiceServer() {}

// UnsafeSpotifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotifyServiceServer will
// result in compilation errors.
type UnsafeSpotifyServiceServer interface {
	mustEmbedUnimplementedSpotifyServiceServer()
}

func RegisterSpotifyServiceServer(s *grpc.Server, srv SpotifyServiceServer) {
	s.RegisterService(&_SpotifyService_serviceDesc, srv)
}

func _SpotifyService_StopSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotifyStopInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).StopSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/StopSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).StopSong(ctx, req.(*SpotifyStopInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotifyCreatePlaylist)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/CreatePlaylist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).CreatePlaylist(ctx, req.(*SpotifyCreatePlaylist))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyService_NextSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotifyNextInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).NextSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/NextSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).NextSong(ctx, req.(*SpotifyNextInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpotifyService_PreviousSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotifyPreviousInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServiceServer).PreviousSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.SpotifyService/PreviousSong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServiceServer).PreviousSong(ctx, req.(*SpotifyPreviousInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpotifyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spotify.SpotifyService",
	HandlerType: (*SpotifyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StopSong",
			Handler:    _SpotifyService_StopSong_Handler,
		},
		{
			MethodName: "CreatePlaylist",
			Handler:    _SpotifyService_CreatePlaylist_Handler,
		},
		{
			MethodName: "NextSong",
			Handler:    _SpotifyService_NextSong_Handler,
		},
		{
			MethodName: "PreviousSong",
			Handler:    _SpotifyService_PreviousSong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/spotify_service.proto",
}
