syntax = "proto3";

package github;

option go_package = "github.com/area/grpc-go/service";

service GithubService {
  rpc UpdateRepository(UpdateRepoInfos) returns(UpdateRepoInfos) {}

  rpc UpdateFile(UpdateRepoFile) returns(UpdateRepoFile) {}

  rpc DeleteFile(DeleteRepoFile) returns(DeleteRepoFile) {}

  rpc CreatePushWebhook(GitWebHookInfo) returns(GitWebHookInfo) {}

  rpc TriggerWebHook (GithubWebHookTriggerReq)
    returns (GithubWebHookTriggerReq) {}

  rpc SetActivateAction(SetActivateGithub) returns (SetActivateGithub) {}
}

message GitWebHookInfo {
  // Id of the action that will be sent while creating the webhook
  int32 action_id = 1;

  // Name of the owner of the repository
  string owner = 2;

  // Name of the repository
  string repo = 3;
}


message UpdateRepoInfos {
  string owner = 1; /* Path parameter */
  string repo = 2; /* Path parameter */

  string name = 4;
  string description = 5;
  // There is more to add if needed
}

message UpdateRepoFile {
  string owner = 1; /* Path parameter */
  string repo = 2; /* Path parameter */
  string path = 3; /* Path parameter */

  string message = 4;
  string content = 5; // Base64
  string sha = 6;
  // There is more to add if needed
}

message DeleteRepoFile {
  string owner = 1;
  string repo = 2;
  string path = 3;

  string message = 4;
  string sha = 5;
  // There is more to add if needed
}

message GithubWebHookTriggerReq {
  uint32 action_id = 1;
  bytes payload = 2;
}

message SetActivateGithub {
  uint32 action_id = 1;
  bool activated = 2;
}
