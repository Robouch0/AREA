services:
  client_web:
    build: ./web
    depends_on:
      server:
        condition: service_started
      client_mobile:
        condition: service_completed_successfully
    networks:
      - backend
      - public
    ports:
      - "8081:8081"
    volumes:
     - .:/web
     - /app/node_modules
     - front:/web/front # Common volume

  client_mobile:
    build: ./mobile
    depends_on:
      server:
        condition: service_started
    networks:
      - public
    volumes:
      - ./mobile:/app
      - front:/output # Common volume

  server:
    build: ./server
    env_file:
      - ./server/.env.prod
    networks:
      - backend
      - public
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:14-alpine
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
     - pg-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - public
      - backend

volumes:
  pg-db:
  front:

networks:
  public:
    driver: bridge
  backend:
    internal: true
    driver: bridge
